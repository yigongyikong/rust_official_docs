=====================================================================
https://doc.rust-lang.org/book/foreword.html
=====================================================================
[Foreword]
- It wasn’t always so clear, 
    but the Rust programming language is fundamentally 
    about empowerment: no matter what kind of code 
    you are writing now, Rust empowers you to reach farther, 
    to program with confidence in a wider variety of domains 
    than you did before.
= always so clear하진 않지만, Rust programming language는 fundamentally으로
    empowerment(권한부여)에 대한 것으로: 어떤 종류의 code를 writing하든,
    Rust는 before(이전에) you did한 것 보다 wider variety한 domains(영역)에
    with confidence(자신감있게) program할 수 있는 
    empower you to reach farther(권한을 당신에게 도달하게)한다.
- Take, for example, “systems-level” work that deals with 
    low-level details of memory management, data representation, 
    and concurrency. 
= 예를 들어, memory 관리, data 표시 및 concurrency(동시성)에 대한 low-level의
    details(세부사항)을 deals with(다루는) "system-level"의 work(작업)을 보자.
    !concurrency : 한번에 많은 일을 다루는 것!
        !https://medium.com/@su_bak/%EB%8F%99%EC%8B%9C%EC%84%B1-concurrency-%EA%B3%BC-%EB%B3%91%EB%A0%AC%EC%84%B1-parallelism-%EC%9D%98-%EC%B0%A8%EC%9D%B4-44e6fda0a0cd!
- Traditionally, this realm of programming is seen as arcane, 
    accessible only to a select few who have devoted 
    the necessary years learning to avoid its infamous pitfalls. 
= Traditionally, this programming realm(영역)은 arcane(난해해) 보이고,
    infamous pitfalls(함정)을 avoid하는 learning(배움)에 필요한 수십년을
    devoted(헌신)한 select(선택된) few(소수)에게 only(만) accessible하다.
- And even those who practice it do so with caution, 
    lest their code be open to exploits, crashes, or corruption.
= And it(위~programming)을 practice하는 사람들조차도 their code가 
    exploits(악용), crashes(충돌) 또는 corruption(손상)되기에 open되지 않도록,
    caution(주의)를 가지고 do(활동)한다.
- Rust breaks down these barriers by eliminating the old pitfalls 
    and providing a friendly, 
    polished set of tools to help you along the way. 
= Rust는 old pitfalls(함정)을 eliminating(제거)하고 the way를 along하는데
    help을 줄 polished(세련)된 tools set를, friendly하게 providing하여
    these barriers(장벽)을 breaks down한다.
- Programmers who need to “dip down” 
    into lower-level control can do so with Rust, 
    without taking on the customary risk of crashes or security holes, 
    and without having to learn the fine points of a fickle toolchain. 
= lower-level control로 "dip down"(제어)가 필요한 Programmers는
    crashes(충돌)이나 security holes(보안 허점)의 customary(관례적인) risk를
    taking하지 않고, fickle(변하기 쉬운) toolchain의 fine points(세부 사항)을
    learn할 필요없이 Rust를 써서 can do할 수 있다.
- Better yet, the language is designed to guide you naturally 
    towards reliable code that is efficient in terms of 
    speed and memory usage.
= Better yet(더 나아가), language는 speed와 memory usage의 측면에서
    efficient한 reliable(신뢰할)수 있는 code로 naturally하게 guide하도록
    is designed되었다.
- Programmers who are already working with 
    low-level code can use Rust to raise their ambitions. 
= already low-level code로 working하는 Programmers는 Rust를 use해서
    their ambitions을 raise할 수 있다.
- For example, introducing parallelism in Rust is a relatively low-risk 
    operation: the compiler will catch the classical mistakes for you. 
= 예를 들어, Rust에서 parallelism(병렬처리)를 introducing(도입)하는 것은
    relatively(상대적)으로 low-risk한 operation(작업)이고:
    compiler는 당신의 classical한 mistakes를 catch할 것이다.
- And you can tackle more aggressive optimizations in your code 
    with the confidence that you won’t accidentally introduce crashes 
    or vulnerabilities.
= And accidentally(실수로) crashes 또는 vulnerabilities(취약점)이 없다는
    confidence로 code에서 aggressive(공격적)인 optimizations(최적화)를
    tackle(수행)할 수 있다.
- But Rust isn’t limited to low-level systems programming. 
= But Rust는 low-level systems programming에만 limited되지 않는다.
- It’s expressive and ergonomic enough to make CLI apps, web servers, 
    and many other kinds of code quite pleasant to write
     — you’ll find simple examples of both later in the book. 
= CLI app, web servers 및 many other kinds of code에도 write하기에
    quite(꽤) pleasant(좋)을 만큼 충분히 expressive(표현력이 좋고)
    ergonomic(인체공학적)이다.
    - in the book의 later(마지막)에 both(두 가지) simple examples가 있다.
- Working with Rust allows you to build skills that transfer 
    from one domain to another; 
    you can learn Rust by writing a web app, 
    then apply those same skills to target your Raspberry Pi.
= Rust로 Working(작업)해서 one domain에서 another로 transfer(이전)하는
    skills을 build(구축)할 수 있다;
    web app을 writing해서 Rust를 learn할 수 있고, 
    then(다음엔) those same skills로 Raspberry Pi를 target해 apply할 수있다.
- This book fully embraces the potential of Rust to empower its users. 
= This book은 fully its users에게 empower(권한)을 부여하는
    Rust의 potential(잠재력)을 fully(완전히) embraces(수용)한다.
- It’s a friendly and approachable text intended to help you 
    level up not just your knowledge of Rust, 
    but also your reach and confidence as a programmer in general. 
= Rust에 대한 knowledge를 level up할 뿐만 아니라 in general한 programmer로서
    reach(지식범위)와 confidence(자신감) 또한 높이는 데 help you(도움을 주는) 
    friendly하고 approachable한 text다.
- So dive in, get ready to learn—and welcome to the Rust community!
= So dive in(뛰어 들어서), ready to learn하고-Rust community에 온걸 환영해!
-— Nicholas Matsakis and Aaron Turon
== Nicholas Matsakis와 Aaron Turon가 전함.
=====================================================================